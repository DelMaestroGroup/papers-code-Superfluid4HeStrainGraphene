#! /usr/bin/env python3
summary = """gen_resubmit.py

Description:
  Module for reading dataframe and generating resubmittion files

Prerequisite:
  numpy
  pandas
  pandas dataframe generated by dframe_tools.py

"""

# phase_tool.py
# Sang Wook Kim
# 10.22.2021

import numpy as np
from numpy import pi as Ï€
import math
import pandas as pd
import os

# Generate contiune job arrary for all simulations in the dataframe
def continue_from(dframe, filename, date, suffix = 0):
    ''' Generate sbatch file from dataframe''' 
    commlst = []
    for names in dframe['filedic']:
        with open(names['log']) as thefile:
            for line in thefile:
                if line.startswith("# ./pimc.e"):
                    commlst.append(line[2:-1])
    
    date = date
    savename = os.getcwd()+f"/{filename}"+f"_{date}"+f"_{suffix}.sh"
    print("writing at ",savename)
    commgen = open(savename, "w")
    ct = 0

    print("The number of simulations in this dataframe :", len(commlst))

    commgen.write("""#!/bin/bash

#SBATCH --partition=bluemoon
#SBATCH --nodes=1
#SBATCH --cpus-per-task=1
#SBATCH --ntasks=1
#SBATCH --mem=1GB
#SBATCH --job-name=pimc
#SBATCH --output=out/pimc-%A-%a.log
#SBATCH --time=30:00:00

# change to the directory where you submitted this script
cd ${SLURM_SUBMIT_DIR}

# Check if the out directory exists, if not, create it
if [ ! -d "./out" ]; then
  mkdir out
fi

# Executable section: echoing some Slurm data
echo "Starting sbatch script `basename $0` at:`date`"
echo "Running host:    ${SLURMD_NODENAME}"
echo "Assigned nodes:  ${SLURM_JOB_NODELIST}"
echo "Job ID:          ${SLURM_JOBID}"

# The job array
case ${SLURM_ARRAY_TASK_ID} in
""")
    
    for line in commlst:

        commgen.write(str(ct)+")\n")
        commgen.write("sleep "+str(ct*2)+"\n")
        commgen.write(line + "\n")
        commgen.write(";;"+"\n")
        ct += 1
    #                     print(line[4:])
    commgen.write("""esac
echo \"Finished run at: `date`\"""")
    commgen.close()
    
    print("Your file is ready.")
    
# -----------------------------------------------------------------------------
usage = 'usage: continue_from(dframe, filename, date, suffix = 0)'
# -----------------------------------------------------------------------------
def help():
    print(summary)
    print(usage)
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    print("This is module")
    print(summary)
    print(usage)